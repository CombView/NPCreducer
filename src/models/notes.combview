# important notes on cascade non-determinism (04-2020)
#
#
# When considering a 'choice' parameter on input, keep in mind that output will also be non-deterministic.
# More complicated is to effectively handle cases where two nd functions are combined, without explicit choice being made (by 'is' operator).
# Example:
#  - S is subset(X);         # single nd decision on output 'choice'
#  - S is subset(subset(X)); # on practice, same as above. on theory, double choice could be made (without explicit 'is')
# Since this is not useful, it's better to keep 'choice' option on outputs only, but consider it on parameter for the future.
#
# A final option is to apply 'is' on cascade, explicitly delegating the choice:
#  - S is subset(is subset(X)); # although a little bit strange, it makes clear that two choices are made, not a single one.
#
# This is harder to optimize (cut out 'subset'), but easier to parse.
#
# ---------
#
# Also note that filters apply *before* the object is actually created by selection/choice operator 'is'.
# This also allows to attach *properties* to the generated object, which are verified/validated during generation.
#
# For example:
#   - S is subset(X) | card(S) > 1
#
# Another way to write it (using output function replacement variable '$?'):
#   - S is subset(X) | card($?) > 1
#
# In this case, output filter for '$?' is attached directly on lazy function 'subset'.
# This allows attaching properties to existing types, without explicitly declaring them on generating function.
#
# An example for permutation (make it in a circular array):
#   - P is permutation({0..5}) | circular($?)
#
# The 'circular' property attaches the 'next(P, i)' for the last 'i', which is usually not existing on a regular array.
#
# One implementation mechanism can be seen this way.
#   Filter 'circular' is attached as a callback lambda that processes output ($?) and, if it passes, it attaches itself as a property.
#   Output type could still be: array<index> : P is permutation({0..5}) | circular($?);  # Or more precisely: array<index, 5>
#   It's hard to see a way of putting 'properties' appearing on variable type... looks like it's 'outside' of it, like 'surrounding'.
#   This way, 'property' is attached to the object P itself, not to its type. It can coexist with other
#         arrays, in the same way: set<array> : X := { [1,2,3] , [1,2]}; # which is each type?
#   This raises the question: "Are 'array<index, 3>' and 'array<index, 2>' compatible?". They should: under the 'umbrella' of 'array<index>'.
#   A 'set<array<index,3>>' should not allow this 'X' (second element is not compatible with explicit type).
#
# A property is part of the object itself, not its type.
# This can be further discussed, as it leads to some 'heterogeneity' on elements (e.g., two elements in array
#    with distinct properties), but for now, it looks like a good path to follow.
#
#
#  ============ Cooperative non-deterministic functions ============
#
# It's not unthinkable (but rather complex to manage) non-deterministic cooperative functions:
#   - set : X is union(subset(A), subset(B)) | card( 'output of subset(A)' ) >= card( 'output of subset(B)' );
# Note that the property of cardinality comparison is valid for both outputs, and we cannot just use $? output parameter.
# One solution would be to allow multiple strange "$1?" and "$2?" to handle internal parameters, but there's no real concept of "order" between them.
# The only good solution I see is to name them:
#   - set : X is union(SA is subset(A), SB is subset(B)) | card(SA) >= card(SB);
# Some "worse" thing could require some property from the output as well:
#   - set : X is union(SA is subset(A), SB is subset(B)) | inter(SA, SB) != {} | card(SA) >= 1/3*card($?); # non-empty intersection on SA and SB, and
#                                                                               # requiring size of SA to be at least one third of final elements
# Although this is doable, filtering in this case will likely take place after subset selections, not before
#                                                                   (since it would be even more challenging to implicitly enumerate that).
# ----
# We are not here to propose easy things anyway, let's just do it ;)
# -------------------------------------------------------------------
#
