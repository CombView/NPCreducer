
# CombView model for Set-Union Knapsack Problem (SUKP)
# Igor M. Coelho (2020)

# Updated notation, allowing types on left and assignment on right
# set is equivalent to set<index>
# bigraph<M, N> is equivalent to bigraph<set s1 | s1 = M, set s2 | s2 = N>

# =====================
#      model v1
# ---------------------

SUKP(set : M, set : N, array<int, N> : a, array<int, M> : c, int : b, bigraph<M, N> : G){
   set : S is subset(M);
   maximize @fo : sum{i in S} c[i];
   G2 := induced_subgraph(union(S, N), G);
   sum{j in N | degree(j, G2) > 0} a[j] <= b;
}

# =====================
#      model v2
# ---------------------

# using non-trivial property
SUKP(set : M, set : N, array<int, N> : a, array<int, M> : c, int : b, bigraph<M, N> : G){
   set : S is subset(M);
   maximize @fo : sum{i in S} c[i];
   G2 := induced_subgraph(union(S, N), G) | non_trivial_vertex(G2); # maybe better to create a G3? or allow this?
   sum{j in intersect(N, vertex(G2))} a[j] <= b;
}


# =====================
#      model v3 - MIP
# ---------------------

# subseteq(A,B) is a deterministic verification procedure, returns true if A \subseteq B (different than subset choice function)
SUKP(set : M, set : N, array<int, N> : a, array<int, M> : c, int : b, array<set I | subseteq(I, N), M> : Ni){
   set : S is subset(M);
   maximize @fo : sum{i in S} c[i];
   sum{j in union{i in S} Ni[i]} a[j] <= b;
}

# =====================
#      model v4 - MIP
# ---------------------

# subseteq(A,B) is a deterministic verification procedure, returns true if A \subseteq B (different than subset choice function)
SUKP(set : M, set : N, array<int, N> : a, array<int, M> : c, int : b, array<set I | subseteq(I, N), M> : Ni){
   maximize @fo : sum{i in M} c[i]*x[i];
   @1b : sum{j in N} a[j] * y[j] <= b;
   forall{i in M, j in Ni[i]} @1c_${i}_$j : x[i] <= y[j];
   pack<binary, card(M)> : x;                  # x variables (pack makes them independent)
   pack<binary, card(N)> : y;                  # y variables (pack makes them independent)
   forall{i in M} : x[i] is binary();          # must choose x[i]
   forall{j in N} : y[j] is binary();          # must choose y[j] (or maybe just relax this as real)
}
