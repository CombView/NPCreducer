#
# some basic language definitions
# Igor M. Coelho (2020)

#
# definition for native 'pack'
#
type<x | istype(x)> pack = native;
# if 'pack' is not initialized directly, one can just define how many packed elements.
type<x | istype(x), n | index(n)> pack = native;

#
# definition for native 'array'
#
type<x | istype(x)> array = native;                             # just type: array<int>
type<x, i | type(i)=index> array = native;                      # mix type and non-type indexer: array<int, 5> # means: array<int, {0..4}>
type<x, s | cset(s)> array = native;                            # single cset: array<int, {2..5}>
type<x, i | type(i)=index, j | type(j)=index> array = native;   # two index: array<int, 5, 5> # means: array<int, {0..4}, {0..4}>
type<x, pack<y | type(y)=set<index> | cset(y)>> array = native; # only csets: array<int, {2..5}, {3..8}>
type<x, pack<y | cset(y)> array = native;                       # index or csets: array<int, 5, {3..8}> # meaning: array<int, {0..4}, {3..8}>

# we consider however that a cset(s) for s=5 will yield true, as it would generate a 0..4 range.
# cset(5) => true
# cset({0..4}) => true
# cset({3,4,5,6}) => true
# cset({}) => true
# cset(5.6) => false
# cset({1,5,8}) => false

# we consider keyword 'istype' to distinguish a type from non-type parameter.
#istype :: 'token' -> boolean # (KEYWORD, not function)

# ----------------------------------------------------------------------------
# notes on heterogeneous structures
#
# at this moment, we don't allow different/multiple types for regular structures, like:
#   - set< <int><float> >
# otherwise it becomes very complex to properly define and code them, also to explore the structure.
#
#type<x, pack<y | <type(y)=set<index>><type(y)=index>>> array = native;  # mix type and non-type indexer: array<int, 5, {3..8}> # meaning: array<int, {0..4}, {3..8}>
#
#
# it's also not currently possible to build multiple matching lists on functions.
#
# optional matching list
#function<x | <integer(x)><float(x)>> ...
#function<x | integer(x)><x | float(x)> ...
#
# ----------------------------------------------------------------------------





# ========================
#  some more definitions
# ------------------------

# we have mainly two applications of forall iterative structure:
# - forall{ $non_det } expr<$x>             => pack<$x>
# - forall{ $non_det } @label : constraint  => pack<constraint>
#
# The first forall 'evaluates' several expressions of type $x and returns a pack of it.
#    Examples are: sets (on union/intersection loops) and integers (on sum/product loops)
# The second forall 'generates' several constraints and returns a pack of it.
#    Examples are: regular constraint generations on models.

# =======
#  union
# -------
function<x> union (pack<set<$x>> : psets) -> set<$x>;

# union examples:
#  - union( {1,2,3},{3,4},{1,3,4}  )      => {1..4}
#  - union( pack({1,2,3},{3,4},{1,3,4}) ) => {1..4}
#
# note that, technically, these would be equivalent:
#  - union(forall{i in {1..3}} set(i+1) ) => {2..4}
#  - union{i in {1..3}} set(i+1) => {2..4}

# =======
#   sum
# -------
function<x | numeric(x)> sum (pack<$x> : pvals) -> $x;

# sum examples:
#  - sum( 1, 3, 5 )       => 9
#  - sum( pack(1, 3, 5) ) => 9
#
# note that, technically, these would be equivalent:
#  - sum(forall{i in {1, 3, 5}} i+1 ) => 12
#  - sum{i in {1, 3, 5}} i+1          => 12



# EOF
